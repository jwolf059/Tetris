/*
 * Assignment 6
 * 
 * TCSS305 Autumn 2015
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LinearGradientPaint;
import java.awt.RadialGradientPaint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;

import model.AbstractPiece;
import model.Block;
import model.Board;
import model.Piece;

/**
 * Creates a Drawing Panel for use as a Tetris GUI. 
 * 
 * @author Jeremy Wolf 
 * @version 24 November 2015
 */
public class TetrisDrawingPanel extends JPanel implements Observer {
    
    /**
     * A generated serial version UID for object Serialization.
     */
    private static final long serialVersionUID = -1086875788226165037L;
    
    /**
     * Static Field for Border Color.
     */
    private static final Color COLOR_DARK_GREEN = new Color(88, 122, 23);
    
    /**
     * Static Field for Color Dirt.
     */
    private static final Color COLOR_DIRT = new Color(74, 77, 67);
    
    /**
     * Constant field storing the background color.
     */
    private static final Color PANEL_COLOR = Color.BLACK;
    
    /**
     * Static Field for the Default Block size.
     */
    private static final int DEFAULT_BLOCKSIZE = 30;
    
    /**
     * Static Field for the Default Radius.
     */
    private static final int DEFAULT_RADIUS = 400;
    
    /**
     * Static Field for the Default Stroke size.
     */
    private static final int DEFAULT_STROKE = 1;

    /**
     * Field to store the Tetris Board.
     */
    private final Board myBoard;
    
    /**
     * Field to store the Width.
     */
    private int myWidth;
    
    /**
     * Field to store the Height.
     */
    private int myHeight;
    
    /**
     * Field to store current Piece.
     */
    private Piece myCurrentPiece;
    
    /**
     * List of the Blocks used to draw.
     */
    private List<Rectangle.Double> myDrawableBlocks;
    
    /**
     * List of the Blocks used to draw.
     */
    private List<Rectangle.Double> myFrozenBlocks;
    
    /**
     * Field to store the number of current rows. 
     */
    private int myOldFrozenBlocks;
    
    /**
     * Field to store the Block size.
     */
    private final int myBlockSize;
    
    /**
     * Field to store the Score.
     */
    private final Score myScore;
    
    /**
     * Field to store the Score Panel.
     */
    private final ScorePanel myScorePanel;
    
    /**
     * Field to store if the Bomb exploded.
     */
    private boolean myBombExploded;
    
    /**
     * Field to store the Bomb explosion x.
     */
    private int myExplosionX;
    
    /**
     * Field to store the Bomb explosion Y.
     */
    private int myExplosionY;
    
    /**
     * Field to store the Bombs Explosion radius.
     */
    private int myGradientRadius;
    
    /**
     * Field to store the Gradient Timer.
     */
    private GradientTimer myGradientTimer;
    
    /**
     * Constructs a new TetrisDraingPanel.
     * 
     * @param theWidth is the width of the drawing Panel.
     * @param theHeight is the height of the drawing Panel.
     * @param theBoard the Tetris game Board.
     * @param thePanel the score Panel used.
     */
    public TetrisDrawingPanel(final int theWidth, final int theHeight, 
                              final Board theBoard, final ScorePanel thePanel) {
        super();
        myBoard = theBoard;
        myWidth = theWidth;
        myHeight = theHeight;
        myBlockSize = DEFAULT_BLOCKSIZE;
        myScorePanel = thePanel;
        myScore = myScorePanel.getScoreObject();
        setUpPanel();
    }
    
    /**
     * Sets up the rest of the Tetris Drawing Panel.
     */
    private void setUpPanel() {
        final Border one = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
        final Border two = BorderFactory.createMatteBorder(2, 2, 2, 2, COLOR_DARK_GREEN);
        setBorder(BorderFactory.createCompoundBorder(one, two));
        final Dimension size = new Dimension(myWidth, myHeight); 
        setMinimumSize(size);
        setMaximumSize(size);
        setBackground(PANEL_COLOR);
        setOpaque(true);
        final int val = 300;
        myGradientTimer = new GradientTimer();
        myGradientTimer.addObserver(this);
        myGradientRadius = val;
        myExplosionX = 0;
        myExplosionY = 0;
        myBombExploded = false;
        myCurrentPiece = myBoard.getCurrentPiece();
        myBoard.addObserver(this);
        myDrawableBlocks = new ArrayList<>();
        myOldFrozenBlocks = 0;
        myFrozenBlocks = new ArrayList<>();
        
    }
    
    
    /**
     * Creates visual representation of the current Piece.
     */
    private void visualPiece() {
        myDrawableBlocks.clear();
        final int gameBoardHeight = 20;
        int newX = 0;
        int newY = 0;
        final int [][] state = ((AbstractPiece) myCurrentPiece).getBoardCoordinates();
        for (final int [] coord : state) {
            int counter = 0;
            for (final int val : coord) {
                if (counter == 0) {
                    newX = val * myBlockSize;
                } else {
                    newY = (gameBoardHeight - val - 1) * myBlockSize;
                }
                counter++;
            }
            myDrawableBlocks.add(new Rectangle2D.Double(newX, newY, myBlockSize, myBlockSize));
        }
    }

    /**
     * Creates all the frozen blocks for the current game.
     */
    private void visualFrozenBlock() {
        final List<Block[]> blockList = myBoard.getFrozenBlocks();
        int newX = 0;
        int newY = 0;
        final int gameBoardHeight = 20;
        if (blockList.size() < myOldFrozenBlocks) {
            caculateScore(blockList);
        }
        myOldFrozenBlocks = blockList.size();
        myFrozenBlocks.clear();
        for (int y = 0; y < blockList.size(); y++) {
            final Block[] blockArray = blockList.get(y);
            for (int x = 0; x < blockArray.length; x++) {

                final Block testBlock = blockArray[x];
                if (!testBlock.equals(Block.EMPTY)) {
                    newY = (gameBoardHeight - y - 1) * myBlockSize; 
                    newX = x * myBlockSize;
                    myFrozenBlocks.add(new Rectangle2D.Double(newX, newY, 
                                                              myBlockSize, myBlockSize));  
                }
            }
        }
    }
    
    /**
     * Calculates game score based on number of lines cleared.
     * 
     * @param theList is the new list of frozenBlocks.
     */
    private void caculateScore(final List<Block[]> theList) {
        final int linesRemoved = myOldFrozenBlocks - theList.size();
        myScore.addNumLines(linesRemoved);
    }
    /**
     * Method is used to draw Tetris pieces on the GameBoard.
     * 
     * @param theGraphics the Graphic to be drawn. 
     */
    protected void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2D = (Graphics2D) theGraphics;

        
        g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        final Point2D start = new Point2D.Float(0, myHeight / 4);
        final Point2D end = new Point2D.Float(0, 0);
        final float[] linearDist = {0.0f, 0.9f, 1.0f};
        final Color[] linearColors = {PANEL_COLOR, COLOR_DARK_GREEN, COLOR_DIRT};
        final LinearGradientPaint linearGradient = 
                        new LinearGradientPaint(start, end, linearDist, linearColors);
        
        g2D.setPaint(linearGradient);
        g2D.fill(new Rectangle(0, 0, myWidth, myHeight));
        
        if (myBombExploded) {
            final int y = myHeight - (myExplosionY * myBlockSize);
            final int x = myExplosionX * myBlockSize + myBlockSize * 2;
            final Point2D center = new Point2D.Float(x, y);
            final float [] dist = {0.0f, 0.5f, 0.7f, 1.0f};
            final Color[] colors = {Color.YELLOW, Color.ORANGE, Color.RED, Color.BLACK};
            final RadialGradientPaint gradient = new RadialGradientPaint(center, 
                                                                  myGradientRadius, 
                                                                  dist, colors);
            myGradientTimer.startTimer();
            g2D.setPaint(gradient);
            g2D.fill(new Rectangle(0, 0, myWidth, myHeight));
        }
        for (final Rectangle2D r : myDrawableBlocks) {
            g2D.setPaint(Color.BLUE);
            g2D.fill(r);
            g2D.setStroke(new BasicStroke(DEFAULT_STROKE));
            g2D.setPaint(Color.LIGHT_GRAY);
            g2D.draw(r);
        }
        if (!myFrozenBlocks.isEmpty()) {
            for (final Rectangle2D r2 : myFrozenBlocks) {
                g2D.setPaint(Color.LIGHT_GRAY);
                g2D.fill(r2);
                g2D.setStroke(new BasicStroke(DEFAULT_STROKE));
                g2D.setPaint(Color.BLUE);
                
                g2D.draw(r2);
            }
        }
    }
        
    
    /**
     * Update method when notification is received from the Observable object.
     */
    @Override
    public void update(final Observable theObservable, final Object theArg) {
        myCurrentPiece = myBoard.getCurrentPiece();
        visualPiece();
        visualFrozenBlock();
        final Block block = ((AbstractPiece) myCurrentPiece).getBlock();
        if (block == Block.B) {
            myBombExploded = myBoard.isBombExploded();
            myExplosionX = myCurrentPiece.getX();
            myExplosionY = myCurrentPiece.getY();
        }
        
        if (!myBoard.isGameOver()) {
            repaint();
        }   
    }
    
    /**
     * Creates a GradientTimer used to change the radius of the 
     * radialGradient paint object to give a visualization of a
     * explosion.
     * 
     * @author Jeremy Wolf
     * @version 6 December 15
     *
     */
    private class GradientTimer extends Observable {
        
        /**
         * Static field to store the default delay.
         */
        private static final int DEFAULT_DELAY = 5;
        /**
         * Field to store the timer object.
         */
        private final Timer myGradTimer;
        
        /**
         * Field to store boolean value for Hit max radius.
         */
        private boolean myHitRadius;
        /**
         * Constructs a GradientTimer Object.
         */
        public GradientTimer() {
            super();
            final int minRadius = 10;
            myGradTimer = new Timer(DEFAULT_DELAY, null);
            myGradTimer.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(final ActionEvent theEvent) {
                    if (myHitRadius && myGradientRadius > 1) {
                        myGradientRadius -= 1;
                        repaint();
                    } else if (myGradientRadius == 1) {
                        myGradTimer.stop();
                        myBombExploded = false;
                        myHitRadius = false;
                        myGradientRadius = minRadius;
                    } else {
                        myGradientRadius += 1;
                        repaint();
                        if (myGradientRadius == DEFAULT_RADIUS) {
                            myHitRadius = true;
                        }
                    }
                }
            });
        }

        /**
         * Starts the Gradient Timer.
         */
        public void startTimer() {
            myGradTimer.start();
        }
    }
}



