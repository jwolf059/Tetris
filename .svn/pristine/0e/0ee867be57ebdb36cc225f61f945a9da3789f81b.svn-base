package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LinearGradientPaint;
import java.awt.MultipleGradientPaint.CycleMethod;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;

public class BombTracker extends JPanel implements PropertyChangeListener, Observer {
    
    /**
     * Static Field for Border Color.
     */
    private static final Color COLOR_DARK_GREEN = new Color(88, 122, 23);
    
    /**
     * Static field for the Bomb String.
     */
    private static final String BOMB_STRING = "BOMBS AVAILABLE:  ";
    
    /**
     * Static field for Title Font.
     */
    private static final Font DEFAULT_TITLE = new Font("Title", Font.BOLD, 18);
    
    /**
     * Field to store number of bombs available.
     */
    private int myBombs;
    
    /**
     * Field to store the full bombs available string.
     */
    private String myBombString;

    public BombTracker() {
        super();
        final Border one = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
        final Border two = BorderFactory.createMatteBorder(4, 4, 4, 4, COLOR_DARK_GREEN);
        setBorder(BorderFactory.createCompoundBorder(one, two));
        myBombs = 3;
        myBombString = " " + myBombs; 
        setBackground(Color.BLACK);
    }
    
    /**
     * Adds Bombs to the total number of bombs available. 
     */
    public void addBomb() {
        myBombs += 1;
        myBombString = " " + myBombs;
    }
    
    /**
     * Remove a Bomb from the total number of bombs available. 
     */
    public void removeBomb() {
        myBombs -= 1;
        myBombString = " " + myBombs;
        if (myBombs == 0) {
            
        }
        
    }
    
    protected void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2D = (Graphics2D) theGraphics;

        
        g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        final Point2D start = new Point2D.Float(0, 0);
        final Point2D end = new Point2D.Float(30, 45);
        final float[] linearDist = {0.0f, 0.5f, 1.0f};
        final Color[] linearColors = {Color.YELLOW, Color.RED, Color.YELLOW};
        final LinearGradientPaint linearGradient = 
                        new LinearGradientPaint(start, end, linearDist, 
                                                linearColors, CycleMethod.REPEAT);
        
        g2D.setPaint(linearGradient);
        g2D.fill(new Rectangle(0, 0, getWidth(), getHeight()));
        g2D.setPaint(Color.BLACK);
        g2D.setFont(DEFAULT_TITLE);
        g2D.drawString(BOMB_STRING, 10, 30);
        g2D.drawString(myBombString, 80, 60);
        
        
    
    }

    @Override
    public void propertyChange(final PropertyChangeEvent theEvent) {
        if ("BombUsed".equals(theEvent.getPropertyName())) {
            removeBomb();
            repaint();
        }
        
    }

    @Override
    public void update(Observable theO, Object arg) {
        if (theO instanceof Score) {
            if (((Score)theO).getAddBomb()) {
                addBomb();
                repaint();
            }
        
        }

    }
}
