/*
 * Assignment 6
 * 
 * TCSS305 Autumn 2015
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.AbstractPiece;
import model.Block;
import model.Board;
import model.Piece;

/**
 * Creates a Drawing Panel for use as a Tetris GUI. 
 * 
 * @author Jeremy Wolf 
 * @version 24 November 2015
 */
public class TetrisDrawingPanel extends JPanel implements Observer {
    
    /**
     * A generated serial version UID for object Serialization.
     */
    private static final long serialVersionUID = -1086875788226165037L;
    
    /**
     * Constant field storing the background color.
     */
    private static final Color PANEL_COLOR = Color.BLACK;
    
    /**
     * Static Field for the Default Block size.
     */
    private static final int DEFAULT_BLOCKSIZE = 35;
    
    /**
     * Static Field for the Default Stroke size.
     */
    private static final int DEFAULT_STROKE = 1;

    /**
     * Field to store the Tetris Board.
     */
    private final Board myBoard;
    
    /**
     * Field to store the Width.
     */
    private int myWidth;
    
    /**
     * Field to store the Height.
     */
    private int myHeight;
    
    /**
     * Field to store current Piece.
     */
    private Piece myCurrentPiece;
    
    /**
     * List of the Blocks used to draw.
     */
    private List<Rectangle.Double> myDrawableBlocks;
    
    /**
     * List of the Blocks used to draw.
     */
    private List<Rectangle.Double> myFrozenBlocks;
    
    /**
     * Field to store the Block size.
     */
    private int myBlockSize;
    
    /**
     * Constructs a new TetrisDraingPanel.
     * 
     * @param theWidth is the width of the drawing Panel.
     * @param theHeight is the height of the drawing Panel.
     * @param theBoard the Tetris game Board.
     */
    public TetrisDrawingPanel(final int theWidth, final int theHeight, 
                              final Board theBoard) {
        super();
        myBoard = theBoard;
        myWidth = theWidth;
        myHeight = theHeight;
        myBlockSize = DEFAULT_BLOCKSIZE;
        setUpPanel();
    }
    
    /**
     * Sets up the rest of the Tetris Drawing Panel.
     */
    private void setUpPanel() {
        setFocusable(true);
        final Dimension size = new Dimension(myWidth, myHeight); 
        setMinimumSize(size);
        setMaximumSize(size);
        setBackground(PANEL_COLOR);
        setOpaque(true);
        myCurrentPiece = myBoard.getCurrentPiece();
        myBoard.addObserver(this);
        myDrawableBlocks = new ArrayList<>();
        myFrozenBlocks = new ArrayList<>();
        
    }
    /**
     * Method is used to draw Tetris pieces on the GameBoard..
     * 
     * @param theGraphics the Graphic to be drawn. 
     */
    protected void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2D = (Graphics2D) theGraphics;

        
        g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        for (final Rectangle2D r : myDrawableBlocks) {
            g2D.setPaint(Color.BLUE);
            g2D.fill(r);
            g2D.setStroke(new BasicStroke(DEFAULT_STROKE));
            g2D.setPaint(Color.LIGHT_GRAY);
            g2D.draw(r);
        }
        if (!myFrozenBlocks.isEmpty()) {
            for (final Rectangle2D r2 : myFrozenBlocks) {
                g2D.setPaint(Color.LIGHT_GRAY);
                g2D.fill(r2);
                g2D.setStroke(new BasicStroke(DEFAULT_STROKE));
                g2D.setPaint(Color.BLUE);
                
                g2D.draw(r2);
            }
        }
    }
        
    
    /**
     * Update method when notification is received from the Observable object.
     */
    @Override
    public void update(final Observable theObservable, final Object theArg) {
        myCurrentPiece = myBoard.getCurrentPiece();
        visualPiece();
        visualFrozenBlock();
        if (!myBoard.isGameOver()) {
            repaint();
        } 
            
    }
    
    /**
     * Creates visual representation of the current Piece.
     */
    private void visualPiece() {
        myDrawableBlocks.clear();
        System.out.println(myCurrentPiece.getClass().toString());
        final int gameBoardHeight = 20;
        int newX = 0;
        int newY = 0;
        final int [][] state = ((AbstractPiece) myCurrentPiece).getBoardCoordinates();
        for (final int [] coord : state) {
            int counter = 0;
            for (final int val : coord) {
                if (counter == 0) {
                    newX = val * myBlockSize;
                } else {
                    newY = (gameBoardHeight - val - 1) * myBlockSize;
                }
                counter++;
            }

            myDrawableBlocks.add(new Rectangle2D.Double(newX, newY, myBlockSize, myBlockSize));
        }
    }

    /**
     * Creates all the frozen blocks for the current game.
     */
    private void visualFrozenBlock() {
        final List<Block[]> blockList = myBoard.getFrozenBlocks();
        int newX = 0;
        int newY = 0;
        final int gameBoardHeight = 20;
        myFrozenBlocks.clear();
        for (int y = 0; y < blockList.size(); y++) {
            final Block[] blockArray = blockList.get(y);
            for (int x = 0; x < blockArray.length; x++) {

                final Block testBlock = blockArray[x];
                if (!testBlock.equals(Block.EMPTY)) {
                    newY = (gameBoardHeight - y - 1) * myBlockSize; 
                    newX = x * myBlockSize;
                    myFrozenBlocks.add(new Rectangle2D.Double(newX, newY, 
                                                              myBlockSize, myBlockSize));  
                }
            }
        }
    }
    
    /**
     * Changes the current GameBoard.
     * @param theWidth the new width of the game board.
     * @param theHeight the new height of the game board.
     * @param theBlockSize the new blockSize.
     */
    public void setGameSize(final int theWidth, 
                             final int theHeight, 
                             final int theBlockSize) {
        myWidth = theWidth;
        myHeight = theHeight;
        myBlockSize = theBlockSize;
        final Dimension size = new Dimension(theWidth, theHeight);
        setMinimumSize(size);
        setMaximumSize(size);
        
    }
    



    

        
    
}
