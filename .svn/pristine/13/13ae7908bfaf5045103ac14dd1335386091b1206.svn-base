/*
 * Assignment 6
 * 
 * TCSS305 Autumn 2015
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.AbstractPiece;
import model.Board;
import model.Piece;

/**
 * Creates a Drawing Panel for the next Tetris piece. 
 * 
 * @author Jeremy Wolf 
 * @version 24 November 2015
 */
public class TetrisNextPiecePanel extends JPanel implements Observer {

    /**
     * A generated serial version UID for object Serialization.
     */
    private static final long serialVersionUID = -8256203474122114757L;
    
    /**
     * Static Field for the Default Block size.
     */
    private static final int DEFAULT_BLOCKSIZE = 35;
    
    /**
     * Static Field for the Default Stroke size.
     */
    private static final int DEFAULT_STROKE = 1;
    
    /**
     * Field to store the Tetris Board.
     */
    private final Board myBoard;
    
    /**
     * Field to store the next Piece.
     */
    private Piece myNextPiece;
    
    /**
     * List of the Blocks used to draw.
     */
    private final List<Rectangle.Double> myDrawableBlocks;
    
    /**
     * Field to store the Width.
     */
    private int myWidth;
    
    /**
     * Field to store the Height.
     */
    private int myHeight;
    
    /**
     * Field to store the Block size.
     */
    private int myBlockSize;
    
    /**
     * Constructor for the nextPiece panel.
     * 
     * @param theWidth is the width of the drawing Panel.
     * @param theHeight is the height of the drawing Panel.
     * @param theBoard the Tetris game Board.
     */
    public TetrisNextPiecePanel(final int theWidth, final int theHeight, 
                                final Board theBoard) {
        super();
        myBoard = theBoard;
        myWidth = theWidth;
        myHeight = theHeight;
        myBlockSize = DEFAULT_BLOCKSIZE;
        myDrawableBlocks = new ArrayList<>();
        setUpPanel();

    }
    
    /**
     * Sets up the rest of the Tetris Next Piece Panel.
     */
    private void setUpPanel() {
        final Dimension size = new Dimension(myWidth, myHeight); 
        myNextPiece = myBoard.getNextPiece();
        myBoard.addObserver(this);
        setSize(size);
        setMinimumSize(size);
        setMaximumSize(size);
        setPreferredSize(size);
        setOpaque(true);
    }
    
    /**
     * Method is used to draw the next Tetris pieces on the Next Piece panel..
     * 
     * @param theGraphics the Graphic to be drawn. 
     */
    protected void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2D = (Graphics2D) theGraphics;

        
        g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        for (final Rectangle2D r : myDrawableBlocks) {
            g2D.setPaint(Color.GREEN);
            g2D.fill(r);
            g2D.setStroke(new BasicStroke(DEFAULT_STROKE));
            g2D.setPaint(Color.BLACK);
            g2D.draw(r);
        }
    }
    
    /**
     * Update method updates when a change is observed. 
     */
    @Override
    public void update(final Observable theObserver, final Object theArg) {
        myNextPiece = myBoard.getNextPiece();
        visualPiece();
        repaint();
    } 
    
    /**
     * Creates visual representation of the current Piece.
     */
    private void visualPiece() {
        myDrawableBlocks.clear();
        System.out.println(myNextPiece.getClass().toString());
        final int nextPieceOffSetY = 4;

        int newX = 0;
        int newY = 0;
        final int [][] state = ((AbstractPiece) myNextPiece).getRotation();
        for (final int [] coord : state) {
            int counter = 0;
            for (final int val : coord) {
                if (counter == 0) {
                    newX = (1 + val) * myBlockSize;
                } else {
                    newY = (nextPieceOffSetY - val - 1) * myBlockSize;
                }
                counter++;
            }

            myDrawableBlocks.add(new Rectangle2D.Double(newX, newY, myBlockSize, myBlockSize));
        }
    }
    
    /**
     * Changes the current Next Piece Panel.
     * @param theWidth the new width of the Next Piece Panel.
     * @param theHeight the new height of the Next Piece Panel.
     * @param theBlockSize the new blockSize.
     */
    public void setGameSize(final int theWidth, 
                            final int theHeight, 
                            final int theBlockSize) {
        myWidth = theWidth;
        myHeight = theHeight;
        myBlockSize = theBlockSize;
        final Dimension size = new Dimension(theWidth, theHeight);
        setMinimumSize(size);
        setMaximumSize(size);  
    }
}


